;-    .-.                                                                       
;-   /'v'\   SISKIN-Builder project file                                        
;-  (/uOu\)  https://github.com/Siskin-framework/Builder/                       
;-===="="=======================================================================

name:     %Rebol
group:    %rebol
product:  Base    ; default product.. the others are by include: Core or Bulk

strip:    on

root:     %../
source:   %src/
include:  %src/include/
temp:     %make/tmp/
;output:   %build/

stack-size: 4194304 ;= 4MB (4 * 1024 * 1024)
optimize:   2

version: 3.16.1

#if Linux?   [ defines: TO_LINUX   ]
#if macOS?   [ defines: TO_MACOS   ]
#if (system/platform = 'haiku)   [ defines: TO_HAIKU   ]
#if Windows? [ defines: TO_WINDOWS ]
#if OpenBSD? [ defines: TO_OPENBSD ]
#if FreeBSD? [ defines: TO_FREEBSD ]
#if (system/platform = 'NetBSD)  [ defines: TO_NETBSD  ]
#if (system/platform = 'Turris)  [ defines: TO_LINUX   ]

#if Posix? [ clfag: -Wno-pointer-sign ] ;@@ Review these warnings and fix them!

target-windows: [
	os:       windows
	sys:      win32
	vendor:   pc
	platform: Windows
	compiler: clang
	upx:      on
]
target-macos: [
	os:       macos
	sys:      darwin
	vendor:   apple
	platform: macOS
	compiler: clang
]
target-linux: [
	os:       linux
	sys:      linux
	platform: Linux
	vendor:   pc
	compiler: gcc

	library: %dl
]
target-openbsd: [
	os:       openbsd
	sys:      openbsd
	platform: OpenBSD
	vendor:   pc
	compiler: clang
]
target-freebsd: [
	os:       freebsd
	sys:      freebsd
	platform: FreeBSD
	vendor:   pc
	compiler: clang
]
target-netbsd: [
	os:       netbsd
	sys:      netbsd
	platform: NetBSD
	vendor:   pc
	compiler: gcc
]
target-haiku: [
	os:       haiku
	sys:      haiku
	platform: Haiku
	vendor:   pc
	compiler: clang

	library: [%network %iconv]
	defines: [ENDIAN_LITTLE USE_OLD_PIPE]
]
target-turris: [
	os:       turris
	sys:      linux
	platform: Turris
	vendor:   pc
	compiler: gcc
]

#if Linux? [
	cross-haiku-x86: [
		compiler: %/tools/cross-tools-x86/bin/i586-pc-haiku-gcc
		library:  %/system/lib/
		flag: "--sysroot=/tools/cross-tools-x86/sysroot"
		:target-haiku
		:make-x86-exe
	]
	cross-haiku-x64: [
		compiler: %/tools/cross-tools-x86_64/bin/x86_64-unknown-haiku-gcc
		library:  %/system/lib/
		flag: "--sysroot=/tools/cross-tools-x86_64/sysroot"
		:target-haiku
		:make-x64-exe
	]
	cross-linux-gnueabi: [
		;- requires: sudo apt-get install gcc-arm-linux-gnueabi
		compiler: %/usr/bin/arm-linux-gnueabi-gcc
		library:  %/usr/arm-linux-gnueabi/lib/
		:target-linux
		arch: armv6
	]
	cross-linux-gnueabihf: [
		;- requires: sudo apt-get install gcc-arm-linux-gnueabihf
		compiler: %/usr/bin/arm-linux-gnueabihf-gcc
		library:  %/usr/arm-linux-gnueabihf/lib/
		:target-linux
		arch: armv7
	]
	cross-linux-aarch64: [
		;- requires: sudo apt-get install gcc-aarch64-linux-gnu
		compiler: %/usr/bin/aarch64-linux-gnu-gcc
		library:  %/usr/aarch64-linux-gnu/lib/
		:target-linux
		:arch-x64
		arch: arm64
	]
	cross-linux-riscv64: [
		;- requires: sudo apt-get install gcc-riscv64-linux-gnu
		compiler: %/usr/bin/riscv64-linux-gnu-gcc
		library:  %/usr/riscv64-linux-gnu/lib/
		:target-linux
		:arch-x64
		arch: riscv64
	]
]

core-files: [
	%core/a-constants.c
	%core/a-globals.c
	%core/a-lib.c
	%core/b-boot.c
	%core/b-init.c
	%core/c-do.c
	%core/c-error.c
	%core/c-frame.c
	%core/c-function.c
	%core/c-handle.c
	%core/c-port.c
	%core/c-task.c
	%core/c-word.c
	%core/d-crash.c
	%core/d-dump.c
	%core/d-print.c
	%core/f-blocks.c
	%core/f-deci.c
	%core/f-dtoa.c
	%core/f-enbase.c
	%core/f-extension.c
	%core/f-int.c
	%core/f-math.c
	%core/f-modify.c
	%core/f-qsort.c
	%core/f-random.c
	%core/f-round.c
	%core/f-series.c
	%core/f-stubs.c
	%core/l-scan.c
	%core/l-types.c
	%core/m-gc.c
	%core/m-pools.c
	%core/m-series.c
;	%core/n-audio.c         ;not implemented
	%core/n-control.c
;	%core/n-crypt.c         ;optional, use: include-cryptography
	%core/n-data.c
;	%core/n-draw.c          ;old source
;	%core/n-graphics.c      ;old source
;	%core/n-image.c         ;optional, use: include-image-natives
	%core/n-io.c
	%core/n-loop.c
	%core/n-math.c
	%core/n-sets.c
	%core/n-strings.c
	%core/n-system.c
;	%core/p-audio.c        ;optional, use: include-audio
	%core/p-checksum.c
;	%core/p-clipboard.c    ;optional, use: include-clipboard (windows only!)
	%core/p-console.c
	%core/p-dir.c
	%core/p-dns.c
	%core/p-event.c
	%core/p-file.c
	%core/p-net.c
;	%core/p-midi.c          ;optional, use: include-midi
;	%core/p-serial.c        ;optional, use: include-serial
;	%core/p-timer.c         ;not implemented
	%core/s-cases.c
	%core/s-crc.c
	%core/s-file.c
	%core/s-find.c
	%core/s-make.c
	%core/s-mold.c
	%core/s-ops.c
	%core/s-trim.c
	%core/s-unicode.c
	%core/t-bitset.c
	%core/t-block.c
	%core/t-char.c
	%core/t-datatype.c
	%core/t-date.c
	%core/t-decimal.c
	%core/t-event.c
	%core/t-function.c
	%core/t-gob.c
	%core/t-handle.c
	%core/t-image.c
	%core/t-integer.c
	%core/t-logic.c
	%core/t-map.c
	%core/t-money.c
	%core/t-none.c
	%core/t-object.c
	%core/t-pair.c
	%core/t-port.c
	%core/t-string.c
	%core/t-struct.c
	%core/t-time.c
	%core/t-tuple.c
	%core/t-typeset.c
	%core/t-utype.c
	%core/t-vector.c
	%core/t-word.c
;	%core/u-aes.c             ;optional, use: include-cryptography
;	%core/u-bigint.c ;needed for RSA which is needed in TLS protocol (HTTPS)
;	%core/u-bmp.c             ;optional, use: include-native-bmp-codec
;	%core/u-bincode.c         ;optional, but required in many core functions
;	%core/u-chacha20.c        ;optional, use: include-cryptography
	%core/u-compress.c
;	%core/u-dh.c              ;optional, use: include-cryptography
;	%core/u-dialect.c         ;optional, use: include-dialecting (delect)
;	%core/u-gif.c             ;optional, use: include-native-gif-codec
;	%core/u-iconv.c           ;optional, use: include-iconv
;	%core/u-image-resize.c    ;optional, use: include-image-natives
;	%core/u-jpg.c             ;optional, use: include-native-jpg-codec
;	%core/u-lzma.c            ;optional, use: include-lzma-compression
	%core/u-parse.c
;	%core/u-png.c             ;optional, use: include-native-png-codec
;	%core/u-poly1305.c        ;optional, use: include-cryptography
;	%core/u-rc4.c             ;optional, use: include-cryptography
;	%core/u-rsa.c             ;optional, use: include-cryptography
;	%core/u-uECC.c            ;optional, use: include-cryptography
	%core/u-zlib.c
;	%core/u-wav.c             ;optional, use: include-native-wav-codec

	%core/u-mbedtls.c
	%core/mbedtls/platform.c
	%core/mbedtls/platform_util.c
;	%core/mbedtls/ripemd160.c         ;use: include-optional-checksums
	%core/mbedtls/sha1.c
	%core/mbedtls/sha256.c
	%core/mbedtls/sha512.c
;	%core/mbedtls/md4.c               ;use: include-optional-checksums
	%core/mbedtls/md5.c

;- deprecated checksum implementations replaced by mbedtls
;	%core/deprecated/u-sha1.c
;	%core/deprecated/u-sha2.c
;	%core/deprecated/u-md5.c
]

host-files: [
	%os/host-main.c
	%os/host-args.c
	%os/host-device.c
	%os/host-stdio.c
	%os/dev-net.c
	%os/dev-dns.c
;	%os/dev-checksum.c
;	%os/host-ext-sokol.c
;	%os/host-view.c
	#if Windows? [
		%os/win32/host-lib.c
		%os/win32/dev-stdio.c
		%os/win32/dev-file.c
		%os/win32/dev-event.c
;		%os/win32/dev-clipboard.c
;		%os/win32/dev-audio.c
;		%os/win32/dev-serial.c
;		%os/win32/host-event.c
;		%os/win32/host-window.c
;		%os/win32/host-graphics.c
;		%os/win32/host-compositor.c
	]
	#if Posix? [
		%os/posix/host-lib.c
		%os/posix/host-readline.c
		;%os/posix/host-window.c
		%os/posix/dev-file.c
		%os/posix/dev-stdio.c
		%os/posix/dev-event.c
		;%os/posix/dev-serial.c
	]
]

host-files-view: [
	#if Windows? [
		%os/win32/sys-utils.c
		%os/win32/sys-codecs.cpp
		%os/win32/sys-d2d.cpp
		;%os/win32/host-image.c
		;%win32/sys-codecs-ini.c

		%os/win32/host-event.c
		%os/win32/host-window.c
		;%os/win32/host-graphics.c
		%os/win32/host-compositor.c
	]
]

mezz-base-files: [
;-- base: low-level boot in lib context:
	%mezz/base-constants.reb
	%mezz/base-funcs.reb
	%mezz/base-series.reb
	%mezz/base-files.reb
	%mezz/base-debug.reb
	%mezz/base-defs.reb
	%mezz/base-collected.reb ; contains automatically collected code from C files
]
mezz-sys-files: [
;-- sys: low-level sys context:
	%mezz/sys-base.reb
	%mezz/sys-ports.reb
	%mezz/sys-codec.reb ; export to lib!
	%mezz/sys-load.reb
	%mezz/sys-start.reb
]
mezz-lib-files: [
;-- lib: mid-level lib context:
	%mezz/mezz-secure.reb
	%mezz/mezz-types.reb
	%mezz/mezz-func.reb
	%mezz/mezz-debug.reb
	%mezz/mezz-control.reb
	%mezz/mezz-save.reb
	%mezz/mezz-series.reb
	%mezz/mezz-files.reb
	%mezz/mezz-shell.reb
	%mezz/mezz-math.reb
	%mezz/mezz-help.reb ; move dump-obj!
	%mezz/mezz-banner.reb
;	%mezz/mezz-colors.reb ; include-mezz-colors
;	%mezz/mezz-date.reb ; Internet date support, include-mezz-date
;	%mezz/mezz-tag.reb  ; build-tag
	%mezz/mezz-tail.reb
;	%mezz/codec-unixtime.reb
;-- cryptographic           
;	%mezz/codec-utc-time.reb ; include-prot-https
;	%mezz/codec-pkix.reb
;	%mezz/codec-der.reb      ; include-prot-https
;	%mezz/codec-crt.reb      ; include-prot-https
;	%mezz/codec-ppk.reb
;	%mezz/codec-ssh-key.reb
;-- compression             
;	%mezz/codec-gzip.reb
;	%mezz/codec-zip.reb
;	%mezz/codec-tar.reb
;-- other                   
;	%mezz/codec-bbcode.reb
;	%mezz/codec-json.reb
;	%mezz/codec-xml.reb
;	%mezz/codec-html-entities.reb
;	%mezz/codec-wav.reb
;	%mezz/codec-pdf.reb
;	%mezz/codec-swf.reb
;	%mezz/codec-image.reb ; included using: include-image-os-codec (windows and macos only so far)
;	%mezz/codec-image-ext.reb ; image codec extensions (codecs/png/size?)
]
mezz-prot-files: [
;-- protocols:
;	%mezz/prot-http.reb
;	%mezz/prot-tls.reb
;	%mezz/prot-whois.reb
;	%mezz/prot-mysql.reb
]
boot-host-files: [] ; may be used for custom boot script


config: [ ;- this is list of configuration (optional) defines
	INCLUDE_MBEDTLS ;- replaced original checksum implementations
	COLOR_CONSOLE   ;- use ANSI escape sequences in prompt and results
	;DEBUG_HASH_COLLISIONS

	;*** Unfinished features **************************************************/
	;INCLUDE_TASK    ;- tasks are not implemented yet, so include it only on demand

	;*** Other (not recommanded) options **************************************/
	;HAS_WIDGET_GOB  ;- used in t-gob.c
	;EXCLUDE_CHACHA20POLY1305 ; don't include chacha20 and poly1305 cipher/authentication code
	;USE_EMPTY_HASH_AS_NONE   ; a single # means NONE, else error; Used in l-scan.c file
	;DO_NOT_NORMALIZE_MAP_KEYS
	;	 with above define you would get:
	;		[a b:]     = keys-of make map! [a 1 b: 2]
	;		[a 1 b: 2] = body-of make map! [a 1 b: 2]
	;	
	;	 else:
	;		[a b]       = keys-of make map! [a 1 b: 2]
	;		[a: 1 b: 2] = body-of make map! [a 1 b: 2]

	;FORCE_ANSI_ESC_EMULATION_ON_WINDOWS  ; would not try to use MS' built-in VIRTUAL_TERMINAL_PROCESSING
	;EXCLUDE_VECTOR_MATH  ; don't include vector math support (like: 3 * #[vector! integer! 8 3 [1 2 3]]); Used in t-vector.c file
	;WRITE_ANY_VALUE_TO_CLIPBOARD ; https://github.com/Oldes/Rebol-issues/issues/1619

	;SERIES_LABELS ; used for special debug purposes
	;SHOW_SIZEOFS  ; for debugging ports to some new systems
	;SHOW_EXPAND_STACK ; will print info when stack expands
	;NDEBUG        ; removes some asserts
	;TEST_SCAN
	;_DEBUG

	;*** Memory pool special defines (were not used!) *************************/
	; these were found in sources, but never actually used...
	;CHAFF    ; Fill series data to crash old references (crashes at start, so hard to say, if it's ok)
	;MUNGWALL ; "MungWall"-style sentinels for REBNODEs (missing Mung_Check function, not ok!) Amiga only?
]

;-------------------------------------------------------------------------------
;- Include definitions (for fine-tunning products)                              
;-------------------------------------------------------------------------------

;- image related natives and codecs:                                            
include-image-natives: [
	; image related native functions like:
	; `hsv-to-rgb`, `rgb-to-hsv`, `tint`, `resize`, `premultiply`, `blur`
	; on Windows also: `image` as common entry to os image codec (if enabled)
	config: INCLUDE_IMAGE_NATIVES
	core-files: %core/n-image.c
	core-files: %core/u-image-resize.c
	core-files: %core/u-image-blur.c
]

include-native-bmp-codec: [config: INCLUDE_BMP_CODEC core-files: %core/u-bmp.c]
include-native-png-codec: [config: INCLUDE_PNG_CODEC core-files: %core/u-png.c]
include-native-qoi-codec: [config: INCLUDE_QOI_CODEC core-files: %core/u-qoi.c]
include-native-jpg-codec: [config: INCLUDE_JPG_CODEC core-files: %core/u-jpg.c]
include-native-gif-codec: [config: INCLUDE_GIF_CODEC core-files: %core/u-gif.c]

include-codec-rebin: [config: INCLUDE_REBIN_CODEC core-files: %core/u-rebin.c]


;@@ on Windows it's better to use system image codec (ability to use more types)
include-image-os-codec: [
	config: INCLUDE_IMAGE_OS_CODEC
	mezz-lib-files: %mezz/codec-image.reb
	#if Windows? [
		host-files: %os/win32/host-image.c
	]
	#if MacOS? [
		host-files: [
			%os/osx/host-image.c
			%os/osx/sys-codecs.m
			%os/osx/sys-utils.m
		]
		frameworks: [CoreGraphics CoreImage ImageIO Foundation]
	]
]

include-image-codecs: [
	#if Windows? [
		:include-image-os-codec
	]
	#if MacOS? [
		:include-image-os-codec
	]
	#if (find [Linux OpenBSD FreeBSD NetBSD Turris] system/platform) [
		:include-native-bmp-codec
		:include-native-png-codec
		:include-native-jpg-codec
		:include-native-gif-codec
	]
	:include-native-qoi-codec
	mezz-lib-files: %mezz/codec-image-ext.reb ; png/size? function and similar
]

;- native devices:                                                              
include-clipboard: [
	#if Windows? [
		config:     INCLUDE_CLIPBOARD
		core-files: %core/p-clipboard.c
		host-files: %os/win32/dev-clipboard.c
	]
	#if macOS? [
		config:     INCLUDE_CLIPBOARD
		core-files: %core/p-clipboard.c
		host-files: %os/osx/dev-clipboard.c
		host-files: %os/osx/sys-clipboard.m
		host-files: %os/osx/sys-utils.m
		framework:  AppKit
	]
]
include-midi: [
	#if Windows? [
		core-files: %core/p-midi.c
		host-files: %os/win32/dev-midi.c
		mezz-sys-files: %mezz/sys-ports-midi.reb
		config:     INCLUDE_MIDI_DEVICE
		library:    %winmm
	]
	#if macOS? [
		core-files: %core/p-midi.c
		host-files: %os/osx/dev-midi.c
		mezz-sys-files: %mezz/sys-ports-midi.reb
		config:     INCLUDE_MIDI_DEVICE
		frameworks: [CoreServices CoreMIDI]

	]
	#if Linux? [
		; there is no support yet
	]
	#if OpenBSD? [
		; there is no support yet
	]
]
include-serial: [
	#if (find [windows linux] system/platform) [
		core-files: %core/p-serial.c
		config:     INCLUDE_SERIAL_DEVICE
	]
	#if Windows? [
		host-files: %os/win32/dev-serial.c
	]
	#if Linux? [
		host-files: %os/posix/dev-serial.c
	]
]
include-audio: [
	#if Windows? [
		core-files: %core/p-audio.c
		host-files: %os/win32/dev-audio.c
		mezz-sys-files: %mezz/sys-ports-audio.reb
		config:     INCLUDE_AUDIO_DEVICE
	]
]

;- native utilities:                                                            
include-bincode:    [core-files: %core/u-bincode.c]
include-dialecting: [core-files: %core/u-dialect.c config: INCLUDE_DELECT]
include-iconv: [
	core-files: %core/u-iconv.c
	#if macOS? [
		library: %iconv
	]
	#if (any [OpenBSD? FreeBSD?]) [
		include: %/usr/local/include
		library: %/usr/local/lib/
		library: %iconv
	]
]

;- native cryptography:                                                         
include-cipher-camelia: [
	core-files: %core/mbedtls/camellia.c
	config: MBEDTLS_CAMELLIA_C
]
include-cipher-aria: [
	core-files: %core/mbedtls/aria.c
	config: MBEDTLS_ARIA_C
]
include-cipher-chacha20: [
	; costs cca 3kB uncompressed
	core-files: %core/mbedtls/chacha20.c
	config: MBEDTLS_CHACHA20_C
]
include-cipher-chachapoly: [
	core-files: %core/mbedtls/chachapoly.c
	core-files: %core/mbedtls/poly1305.c
	config: MBEDTLS_CHACHAPOLY_C
	config: MBEDTLS_POLY1305_C
]
include-cipher-mode-gcm: [
	core-files: %core/mbedtls/gcm.c
	; GCM runs with multiple ciphers and internally uses the generic wrapper
	core-files: %core/mbedtls/cipher.c
	core-files: %core/mbedtls/cipher_wrap.c
	config: MBEDTLS_GCM_C
]
include-cipher-mode-ccm: [
	core-files: %core/mbedtls/ccm.c
	; CCM runs with multiple ciphers and internally uses the generic wrapper
	core-files: %core/mbedtls/cipher.c
	core-files: %core/mbedtls/cipher_wrap.c
	config: MBEDTLS_CCM_C
]
include-cipher-mode-cbc: [
	; costs cca 1.5kB uncompressed (for AES)
	config: MBEDTLS_CIPHER_MODE_CBC
]

include-deprecated-cipher-aes: [
	; costs cca 5kB uncompressed
	config: INCLUDE_AES_DEPRECATED
	include: %src/include/deprecated/
	core-files: %core/deprecated/u-aes.c
	core-files: %core/deprecated/n-crypt-aes.c
]

include-deprecated-cipher-chacha20: [
	; costs cca 10kB uncompressed
	config: INCLUDE_CHACHA20POLY1305_DEPRECATED
	include: %src/include/deprecated/
	core-files: %core/deprecated/u-chacha20.c
	core-files: %core/deprecated/u-poly1305.c
	core-files: %core/deprecated/n-crypt-chacha.c
]

include-rsa: [
	; costs cca 12kB uncompressed
	config: INCLUDE_RSA
	core-files: %core/mbedtls/rsa.c
	core-files: %core/mbedtls/rsa_alt_helpers.c
]
include-rc4: [
	; costs cca 0.5kB uncompressed
	config: INCLUDE_RC4
	core-files: %core/u-rc4.c
]

include-curves-sec1: [
	; curves defined by FIPS 186-4 and SEC1
	config: MBEDTLS_ECP_DP_SECP192R1_ENABLED   ; costs 2kB
	config: MBEDTLS_ECP_DP_SECP224R1_ENABLED   ; costs 2.5kB
	config: MBEDTLS_ECP_DP_SECP256R1_ENABLED   ; costs 2.5kB
	config: MBEDTLS_ECP_DP_SECP384R1_ENABLED
	config: MBEDTLS_ECP_DP_SECP521R1_ENABLED
]
include-curves-koblitz: [
	; "Koblitz" curves
	config: MBEDTLS_ECP_DP_SECP192K1_ENABLED
	config: MBEDTLS_ECP_DP_SECP224K1_ENABLED
	config: MBEDTLS_ECP_DP_SECP256K1_ENABLED
]
include-curves-brainpool: [
	; "Brainpool" curves
	config: MBEDTLS_ECP_DP_BP256R1_ENABLED
	config: MBEDTLS_ECP_DP_BP384R1_ENABLED
	config: MBEDTLS_ECP_DP_BP512R1_ENABLED
]
include-curves-x: [
	config: MBEDTLS_ECP_DP_CURVE25519_ENABLED  ; costs 7.6kB
	config: MBEDTLS_ECP_DP_CURVE448_ENABLED    ; costs 7.6kB; together with CURVE25519 8.1!
]

include-cryptography: [
	; so far cca 183kB uncompressed (basic AES, all ellyptic curves, rsa, rc4, bignum, entropy )
	config: INCLUDE_CRYPTOGRAPHY

	#if Windows? [
		library: %Bcrypt ;; used by mbedtls_platform_entropy_poll
	]

	define: MBEDTLS_ASN1_PARSE_C ; The generic ASN1 parser.
	define: MBEDTLS_ASN1_WRITE_C ; The generic ASN1 writer.

	define: MBEDTLS_CTR_DRBG_C   ; The CTR_DRBG AES-based random generator.

	define: MBEDTLS_AES_C        ; The AES block cipher.
	define: MBEDTLS_DHM_C        ; The Diffie-Hellman-Merkle module.
	define: MBEDTLS_ECDSA_C      ; The elliptic curve DSA library.
	define: MBEDTLS_ECP_C        ; The elliptic curve over GF(p) library.
	define: MBEDTLS_ECDH_C       ; The elliptic curve Diffie-Hellman library.
	define: MBEDTLS_BIGNUM_C     ; The multi-precision integer library. Required for: RSA, ECDSA, ECP, DHM
	define: MBEDTLS_ENTROPY_C    ; The platform-specific entropy code.
	define: MBEDTLS_OID_C        ; Required for RSA
	define: MBEDTLS_PKCS1_V15

	core-files: [
		%core/n-crypt.c
		%core/p-crypt.c

		%core/mbedtls/aes.c
		%core/mbedtls/asn1parse.c
		%core/mbedtls/asn1write.c
		%core/mbedtls/dhm.c
		%core/mbedtls/md.c
		%core/mbedtls/oid.c
		%core/mbedtls/bignum.c
		%core/mbedtls/bignum_core.c
		
		%core/mbedtls/constant_time.c
		%core/mbedtls/ctr_drbg.c
		%core/mbedtls/entropy.c
		%core/mbedtls/entropy_poll.c
		%core/mbedtls/ecdh.c
		%core/mbedtls/ecdsa.c
		%core/mbedtls/ecp.c
		%core/mbedtls/ecp_curves.c
		%core/mbedtls/hash_info.c
	]

	:include-curves-sec1

	:include-rsa
	
	:include-cipher-mode-gcm ; By default just GCM as it is the most secure.

	:include-codec-crt
	:include-codec-der
	:include-codec-pkix
	:include-codec-ppk
	:include-codec-ssh-key
	:include-codec-safe
]

include-cryptography-bulk: [
	:include-curves-koblitz
	:include-curves-brainpool
	:include-curves-x

	:include-cipher-mode-ccm
	:include-cipher-mode-cbc	

	:include-rc4

	:include-cipher-aria
	:include-cipher-camelia
	:include-cipher-chacha20
	:include-cipher-chachapoly
]

include-cryptography-deprecated: [
	;@@  This should not be used anymore, but keeping it here just in case...
	%core/deprecated/u-bigint.c ;needed for RSA abd DH which is needed in TLS protocol (HTTPS)
	%core/deprecated/u-dh.c
	%core/deprecated/u-poly1305.c
	%core/deprecated/u-rsa.c
	%core/deprecated/u-uECC.c

	:include-deprecated-cipher-chacha20
	:include-deprecated-cipher-aes
]

;- native additional checksums:                                                 
include-optional-checksums: [
	config: INCLUDE_MD4        ; checksum: MD4 (unsecure)
	config: INCLUDE_RIPEMD160  ; checksum: RIPE-MD-160 (requires INCLUDE_MBEDTLS)
	config: INCLUDE_SHA224
	config: INCLUDE_SHA384
	config: INCLUDE_SHA3       ; checksum: SHA3-224, SHA3-256, SHA3-384 and SHA3-512
	core-files: [
		%core/mbedtls/md4.c
		%core/mbedtls/ripemd160.c
		%core/mbedtls/sha3.c
	]
]
include-base85-encoding: [
	; adds support for enbase/debase with base 85 (ASCII85)
	config: INCLUDE_BASE85
]
include-base36-encoding: [
	config: INCLUDE_BASE36
]

include-xxhash: [
	config: INCLUDE_XXHASH
	file: %core/u-xxhash.c
]

;- native additional compressions:                                              
include-lzma-compression: [
	config: INCLUDE_LZMA
	core-files: %core/u-lzma.c
]

include-lzw-compression: [
	config: INCLUDE_LZW
	core-files: %core/u-lzw.c
]

include-crush-compression: [
	config: INCLUDE_CRUSH
	core-files: %core/u-crush.c
]

include-brotli-compression: [
	config: INCLUDE_BROTLI
	include: %src/include/brotli/
	core-files: [
		%core/brotli/common/constants.c
		%core/brotli/common/context.c
		%core/brotli/common/transform.c
		%core/brotli/common/dictionary.c
		%core/brotli/common/shared_dictionary.c
		%core/brotli/dec/state.c
		%core/brotli/dec/huffman.c
		%core/brotli/dec/decode.c
		%core/brotli/dec/bit_reader.c
		%core/brotli/enc/backward_references.c
		%core/brotli/enc/backward_references_hq.c
		%core/brotli/enc/bit_cost.c
		%core/brotli/enc/block_splitter.c
		%core/brotli/enc/brotli_bit_stream.c
		%core/brotli/enc/cluster.c
		%core/brotli/enc/command.c
		%core/brotli/enc/compound_dictionary.c
		%core/brotli/enc/compress_fragment.c
		%core/brotli/enc/compress_fragment_two_pass.c
		%core/brotli/enc/dictionary_hash.c
		%core/brotli/enc/encode.c
		%core/brotli/enc/encoder_dict.c
		%core/brotli/enc/entropy_encode.c
		%core/brotli/enc/fast_log.c
		%core/brotli/enc/histogram.c
		%core/brotli/enc/literal_cost.c
		%core/brotli/enc/memory.c
		%core/brotli/enc/metablock.c
		%core/brotli/enc/static_dict.c
		%core/brotli/enc/utf8_util.c
	]
]

include-png-filter-native: [
	config: INCLUDE_PNG_FILTER
	core-files: %core/u-png-filter.c
]

include-view: [
	; currently only on Windows!
	host-files: :host-files-view
	#if Windows? [
		define: REB_VIEW
		:include-image-os-codec
		libraries: [
			%Gdi32
			%Msimg32                   ;- for AlphaBlend
			%Ole32 %OleAut32 %Comctl32 ;- for native widgets & COM access
			%UxTheme                   ;- used for visual defaults
			;%opengl32 %glu32           ;- OpenGL
			;%Shell32         ;- for drag and drop (DragQueryPoint, DragQueryFileW, DragFinish, DragAcceptFiles)
		]
	]
]

;- native tests:                                                                
include-test-extension: [
	host-files: %os/host-ext-test.c
	define:     TEST_EXTENSIONS ;@@TODO: rename!
]

;- native experimantal code:                                                    
include-native-wav-codec: [
	; native WAV codec was just a prove of concept, don't use it
	; there is more feature full Rebol implementation instead
	core-files: %core/u-wav.c
	config:     INCLUDE_WAV_CODEC
]

;- Mezzanine level includes                                                     
; crypto codecs:
include-codec-crt:           [
	:include-codec-pkix
	:include-codec-der
	mezz-lib-files:  %mezz/codec-crt.reb
]
include-codec-der:           [mezz-lib-files:  %mezz/codec-der.reb          ]
include-codec-pkix:          [mezz-lib-files:  %mezz/codec-pkix.reb         ]
include-codec-ppk:           [mezz-lib-files:  %mezz/codec-ppk.reb          ]
include-codec-ssh-key:       [mezz-lib-files:  %mezz/codec-ssh-key.reb      ]
include-codec-safe:          [mezz-lib-files:  %mezz/codec-safe.reb         ]
; compression codecs:
include-codec-gzip:          [mezz-lib-files:  %mezz/codec-gzip.reb         ]
include-codec-zip:           [mezz-lib-files:  %mezz/codec-zip.reb          ]
include-codec-tar:           [mezz-lib-files:  %mezz/codec-tar.reb          ]
include-codec-ar:            [mezz-lib-files:  %mezz/codec-ar.reb           ]
; other codecs:
include-codec-bbcode:        [mezz-lib-files:  %mezz/codec-bbcode.reb       ]
include-codec-html-entities: [mezz-lib-files:  %mezz/codec-html-entities.reb]
include-codec-ico: [
	; at this moment ico can be encoded only from pngs!
	;:include-native-png-codec 
	mezz-lib-files: %mezz/codec-ico.reb
]
include-codec-csv:           [mezz-lib-files:  %mezz/codec-csv.reb          ]
include-codec-json:          [mezz-lib-files:  %mezz/codec-json.reb         ]
include-codec-xml:           [mezz-lib-files:  %mezz/codec-xml.reb          ]
include-codec-pdf:           [mezz-lib-files:  %mezz/codec-pdf.reb :include-png-filter-native] ; pdf may use special png pre-compression
include-codec-plist:         [mezz-lib-files:  %mezz/codec-plist.reb        ]
include-codec-swf:           [mezz-lib-files:  %mezz/codec-swf.reb          ]
include-codec-wav:           [mezz-lib-files:  %mezz/codec-wav.reb          ]
include-codec-unixtime:      [mezz-lib-files:  %mezz/codec-unixtime.reb     ]
; mezzanines:
include-mezz-ansi:           [mezz-lib-files:  %mezz/mezz-ansi.reb          ]
include-mezz-date:           [mezz-lib-files:  %mezz/mezz-date.reb          ]
include-mezz-colors:         [mezz-lib-files:  %mezz/mezz-colors.reb        ]
; protocols:
include-prot-whois:          [mezz-prot-files: %mezz/prot-whois.reb         ]
include-prot-mysql:          [mezz-prot-files: %mezz/prot-mysql.reb         ]
include-prot-daytime:        [mezz-prot-files: %mezz/prot-daytime.reb       ]
include-prot-https:          [mezz-prot-files: %mezz/prot-http.reb :include-prot-tls]
include-prot-tls: [
	:include-bincode
	:include-cryptography
	mezz-lib-files:  %mezz/codec-utc-time.reb
	mezz-lib-files:  %mezz/codec-der.reb
	mezz-lib-files:  %mezz/codec-crt.reb
	mezz-prot-files: %mezz/prot-tls.reb
]

include-mail: [
	:include-prot-tls
	mezz-prot-files: %mezz/prot-smtp.reb
	mezz-prot-files: %mezz/prot-pop3.reb
	mezz-lib-files:  %mezz/prot-mail.reb
	mezz-lib-files:  %mezz/codec-mime-field.reb
	mezz-lib-files:  %mezz/codec-mime-types.reb
	mezz-lib-files:  %mezz/codec-quoted-printable.reb
]


include-prebol:              [mezz-lib-files: %modules/prebol.reb           ]

include-native-oid: [core-files: %core/n-oid.c] ; `form-oid` native (used in DER codec)


;- Product specifications                                                       

include-rebol-core: [
	:include-mezz-ansi
	:include-clipboard
	:include-cryptography
	:include-bincode
	:include-iconv
	:include-xxhash
	:include-mail
	:include-prot-https

	:include-codec-unixtime
	:include-codec-ar
	:include-codec-gzip
	:include-codec-zip
	:include-codec-tar
	:include-codec-json

	:include-mezz-date

	;:include-codec-rebin ;not yet ready!
	
	config: INCLUDE_SHA224
	config: INCLUDE_SHA384

	product: Core
]

include-rebol-bulk: [
	:include-rebol-core
	:include-optional-checksums
	:include-image-natives
	:include-lzma-compression
	:include-lzw-compression
	:include-brotli-compression
	:include-crush-compression
	:include-base36-encoding
	:include-base85-encoding
	:include-view
	:include-audio
	:include-midi
	:include-serial

	; Extended crypto features
	:include-cryptography-bulk

	:include-codec-pdf
	:include-codec-swf
	:include-codec-gzip
	:include-codec-zip
	:include-codec-tar
	:include-codec-bbcode
	:include-codec-html-entities
	:include-codec-csv
	:include-codec-xml
	:include-codec-wav
	:include-codec-ico
	:include-codec-plist

	:include-image-codecs ; use other optional image codecs before this include!

	:include-mezz-colors

	:include-prebol

	:include-prot-whois
	:include-prot-mysql
	:include-prot-daytime

	:include-dialecting  ;`delect`
	:include-native-oid  ;`form-oid`

	config: INCLUDE_PNG_FILTER ; includes `filter` and `unfilter` natives

	;- for tests:
	:include-test-extension
	;- not recommanded:
	;:include-native-wav-codec

	product: Bulk
]

common: [
	files: :core-files
	clean: %core/b-init.c ;make-boot.reb modifies embedded native code, so b-init.c must be always recompiled

	;define: :config
	define: {REBOL_OPTIONS_FILE=\"gen-config.h\"} ;@@ TODO: should be auto-escaped!

	;cflags: [-ffast-math]

	#if Windows? [
		libraries: [
			%User32
			%wsock32 
			%comdlg32 ;- for GetOpenFileName and GetSaveFileName (request-file)
			%Shell32  ;- for the win32 unicoded program arguments & drag and drop in View
			;%Ntdll   ;- for IsWindows*OrGreater functions
			%Ole32
			;%m
		]
		defines: ENDIAN_LITTLE
		defines: [UNICODE _UNICODE]
		defines: _CRT_SECURE_NO_WARNINGS
	]
	#if macOS? [
		library: %m
		defines: ENDIAN_LITTLE
		defines: USE_OLD_PIPE
		cflags:  -Wno-pointer-sign
		flag:    -mmacosx-version-min=10.9
		entitlements: %make/Entitlements.plist
	]
	#if (find [Linux OpenBSD FreeBSD NetBSD Turris] system/platform) [
		library: %m
		defines: ENDIAN_LITTLE
	]
]

common-host: [
	files: :host-files
	#if Windows? [
		flag:     mconsole
		;flag:    mwindows define: _WINDOWS
		library:  %Advapi32 ;- needed for OS_Browse
		resource: %make/r3.rc
	]
	;#if Posix []
	#if (find [Linux OpenBSD FreeBSD NetBSD Haiku Turris] system/platform) [
		flag: -fPIC ; position independent (used for libs)
	]
]

common-64bit: [
	define: _FILE_OFFSET_BITS=64

	#either Windows? [
		defines: _WIN32
		defines: __LLP64__ ; 64-bit, long (integer) has 32 bits and 'void *' is sizeof(long long)
	][
		;has long (integer) 64 bits
		defines: __LP64__ ; same like LLP64, but long (integer) has 64 bits instead of 32
	]
]

arch-x64: [
	:common-64bit
	arch: x64
	#if macOS? [ flag: "-arch x86_64" ]
]
arch-x86: [
	arch: x86
	#if Windows? [ resource-options: "--target=pe-i386" ]
]
arch-armv6: [
	arch: armv6
	#if linux? [
		flag: "-marm"
		flag: "-march=native" ;; expects, that the host system is arm32!
		library: %dl
	]
]
arch-armv7: [
	:arch-armv6
	arch: armv7
]

arch-arm64: [ ;= armv8
	:common-64bit
	arch: arm64
	#if macOS? [ flag: "-arch arm64" ]
	#if linux? [ flag: "-march=native" ] ;; expects, that the host system is arm64!
	;define: __arm64__
]
arch-mips64le: [
	:common-64bit
	arch: mips64le
]
arch-riscv64: [
	:common-64bit
	arch: riscv64
]


;-------------------------------------------------------------------------------
;- optional settings:                                                           
;-------------------------------------------------------------------------------

clang-size-optimization: [
	;flags:  [-flto -fuse-ld=lld] ;<- /manifestdependency: is not allowed in .drectve error :-(
]

gcc-size-optimization: [
	;- for minimal size:
	;; https://interrupt.memfault.com/blog/code-size-optimization-gcc-flags
	flags:   -O2   ;@@ using -Os leads to compilation errors (too drastic optimizations somewhere)
	flags:   -flto ; link time optimization
	cflags: [-ffunction-sections -fdata-sections]
	lflags: "-Wl,--gc-sections"
]

;-------------------------------------------------------------------------------
;- Action definitions (experimantal so far!)                                    
;-------------------------------------------------------------------------------
;; the idea is, that it should be possible to specify, if the action should be
;; executed immediatelly when is being parsed, before or after compilation.
;; So far it's only before compilation (and not handled by msvc project maker!)

probe-spec: action ["Probe current spec structure"][
	do [? spec]
]
pre-make:   action [@pre "Pre-make headers and boot code"][
	do %make/pre-make.r3 "$NEST_SPEC"
]

;-------------------------------------------------------------------------------
;- All possible compilation targets (eggs) and commands                         
;-------------------------------------------------------------------------------

; target shortcuts..
make-exe: [
	:common
	:common-host
	defines: [REB_EXE]
	do %make/pre-make.r3 "$NEST_SPEC"
]
make-x86-exe:   [:arch-x86   :make-exe ]
make-x64-exe:   [:arch-x64   :make-exe ]
make-armv6-exe: [:arch-armv6 :make-exe ]
make-armv7-exe: [:arch-armv7 :make-exe ]
make-arm64-exe: [:arch-arm64 :make-exe ]
make-mips64le-exe: [:arch-mips64le :make-exe ]
make-riscv64-exe:  [:arch-riscv64  :make-exe ]

; for making Rebol as a shared library
make-dll: [
	:common
	;:common-host
	defines: [REB_API]
	flags:   [-O2 shared]
	upx: off
	#if Posix? [ flag: fPIC upx: off ]
	#if macOS? [ flag: fno-common strip: off lflag: "compatibility_version 3.0"]
	do %make/pre-make.r3 "$NEST_SPEC"
]
; for testing host app using shared library
make-host: [
	:common
	files: none ;includes only host files
	:common-host
	#if Posix? [upx: off]
	do %make/pre-make.r3 "$NEST_SPEC"
]
make-x86-dll:  [:arch-x86 :make-dll  ]
make-x64-dll:  [:arch-x64 :make-dll  ]
make-x86-host: [:arch-x86 :make-host ]
make-x64-host: [:arch-x64 :make-host ]

make-arm64-dll:  [:arch-arm64 :make-dll  ]
make-arm64-host: [:arch-arm64 :make-host ]

make-ext-test: [
	files: only %tests/extension/test.c
	flags: [-O2 shared]
	compiler: clang
	#if Windows? [
		defines: _CRT_SECURE_NO_WARNINGS
	]
	#if Linux? [
		flag: -fPIC
		compiler: gcc
	]
	#if MacOS? [
		:target-macos
	]
	#if OpenBSD? [
		flag: -fPIC
		:target-openbsd
	]
	#if FreeBSD? [
		flag: -fPIC
		:target-freebsd
	]
	#if ('NetBSD = system/platform) [
		flag: -fPIC
		:target-netbsd
	]
	#if ('Turris = system/platform) [
		flag: -fPIC
		:target-turris
	]
]

eggs: [
	#if Windows? [
;		"Pre-make (minimum included)" [
;			pre-make
;		]
;		"Pre-make (all included)" [
;			:include-rebol-bulk
;			pre-make
;		]
		"Rebol/Base windows-x86" [
			name:     %rebol3-base-windows-x86
			:target-windows
			:make-x86-exe
		]
		"Rebol/Core windows-x86" [
			name:     %rebol3-core-windows-x86
			:target-windows
			:include-rebol-core
			:make-x86-exe
		]
		"Rebol/Bulk windows-x86" [
			name:     %rebol3-bulk-windows-x86
			:target-windows
			:include-rebol-bulk
			:make-x86-exe
		]

		"Rebol/Base windows-x64" [
			name:     %rebol3-base-windows-x64
			:target-windows
			:make-x64-exe
		]
		"Rebol/Core windows-x64" [
			name:     %rebol3-core-windows-x64
			:target-windows
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk windows-x64" [
			name:     %rebol3-bulk-windows-x64
			:target-windows
			:include-rebol-bulk
			:make-x64-exe
		]

		"Rebol/Core windows-x86 shared library" [
			name:     %lib-rebol3-core-windows-x86
			:target-windows
			:include-rebol-core
			:make-x86-dll
			upx:      off ; library compiled using MSVC seems to make problems when UPXed  
		]
		"Rebol/Core windows-x86 host application" [
			name:     %host-core-windows-x86
			shared:   %lib-rebol3-core-windows-x86
			:target-windows
			:include-rebol-core
			:make-x86-host
		]

		"Rebol/Core windows-x64 shared library" [
			name:     %lib-rebol3-core-windows-x64
			:target-windows
			:include-rebol-core
			:make-x64-dll
		]
		"Rebol/Core windows-x64 host application" [
			name:     %host-core-windows-x64
			shared:   %lib-rebol3-core-windows-x64
			:target-windows
			:include-rebol-core
			:make-x64-host
		]
	]
	#if Linux? [
		#if (find [x86 x64] system/build/arch) [
			"Rebol/Base linux-x86" [
				name:     %rebol3-base-linux-x86
				:target-linux
				:make-x86-exe
			]
			"Rebol/Core linux-x86" [
				name:     %rebol3-core-linux-x86
				:target-linux
				:include-rebol-core
				:make-x86-exe
			]
			"Rebol/Bulk linux-x86" [
				name:     %rebol3-bulk-linux-x86
				:target-linux
				:include-rebol-bulk
				:make-x86-exe
			]
			"Rebol/Base linux-x64" [
				name:     %rebol3-base-linux-x64
				:target-linux
				:make-x64-exe
			]
			"Rebol/Core linux-x64" [
				name:     %rebol3-core-linux-x64
				:target-linux
				:include-rebol-core
				:make-x64-exe
			]
			"Rebol/Bulk linux-x64" [
				name:     %rebol3-bulk-linux-x64
				:target-linux
				:include-rebol-bulk
				:make-x64-exe
			]
		]
		#if (system/build/arch = 'armv6) [
			"Rebol/Base linux-armv6" [
				name:     %rebol3-base-linux-armv6
				:target-linux
				:make-armv6-exe
			]
			"Rebol/Core linux-armv6" [
				name:     %rebol3-core-linux-armv6
				:target-linux
				:include-rebol-core
				:make-armv6-exe
			]
			"Rebol/Bulk linux-armv6" [
				name:     %rebol3-bulk-linux-armv6
				:target-linux
				:include-rebol-bulk
				:make-armv6-exe
			]
		]
		#if (system/build/arch = 'armv7) [
			"Rebol/Base linux-armv7" [
				name:     %rebol3-base-linux-armv7
				:target-linux
				:make-armv7-exe
			]
			"Rebol/Core linux-armv7" [
				name:     %rebol3-core-linux-armv7
				:target-linux
				:include-rebol-core
				:make-armv7-exe
			]
			"Rebol/Bulk linux-armv7" [
				name:     %rebol3-bulk-linux-armv7
				:target-linux
				:include-rebol-bulk
				:make-armv7-exe
			]
		]
		#if (system/build/arch = 'arm64) [
			"Rebol/Base linux-arm64" [
				name:     %rebol3-base-linux-arm64
				:target-linux
				:make-arm64-exe
			]
			"Rebol/Core linux-arm64" [
				name:     %rebol3-core-linux-arm64
				:target-linux
				:include-rebol-core
				:make-arm64-exe
			]
			"Rebol/Bulk linux-arm64" [
				name:     %rebol3-bulk-linux-arm64
				:target-linux
				:include-rebol-bulk
				:make-arm64-exe
			]
		]
		#if (system/build/arch = 'mips64le) [
			"Rebol/Base linux-mips64le" [
				name:     %rebol3-base-linux-mips64le
				:target-linux
				:make-mips64le-exe
			]
			"Rebol/Core linux-mips64le" [
				name:     %rebol3-core-linux-mips64le
				:target-linux
				:include-rebol-core
				:make-mips64le-exe
			]
			"Rebol/Bulk linux-mips64le" [
				name:     %rebol3-bulk-linux-mips64le
				:target-linux
				:include-rebol-bulk
				:make-mips64le-exe
			]
		]
		#if (system/build/arch = 'riscv64) [
			"Rebol/Base linux-riscv64" [
				name:     %rebol3-base-linux-riscv64
				:target-linux
				:make-riscv64-exe
			]
			"Rebol/Core linux-riscv64" [
				name:     %rebol3-core-linux-riscv64
				:target-linux
				:include-rebol-core
				:make-riscv64-exe
			]
			"Rebol/Bulk linux-riscv64" [
				name:     %rebol3-bulk-linux-riscv64
				:target-linux
				:include-rebol-bulk
				:make-riscv64-exe
			]
		]
		#if (system/build/arch = 'x64) [
			"Rebol/Core linux-x64 shared library" [
				name:     %librebol3-core-linux-x64
				;lflag:    "-Wl,-install_name,'/usr/local/lib/librebol-core.3.so'"
				:target-linux
				:include-rebol-core
				:make-x64-dll
			]
			"Rebol/Core linux-x64 host application" [
				name:     %host-core-linux-x64
				shared:   %librebol3-core-linux-x64
				:target-linux
				:include-rebol-core
				:make-x64-host
			]
		]


		;-- Haiku cross-compilation from a Docker image..     
		;@@ https://hub.docker.com/r/haiku/cross-compiler/tags
		;@@ docker.io/oldes/rebol-dev:haiku-x86
		"Cross-compile Rebol/Base for Haiku x86" [
			name:     %rebol3-base-haiku-x86
			:cross-haiku-x86
		]
		"Cross-compile Rebol/Core for Haiku x86" [
			name:     %rebol3-core-haiku-x86
			:include-rebol-core
			:cross-haiku-x86
		]
		"Cross-compile Rebol/Bulk for Haiku x86" [
			name:     %rebol3-bulk-haiku-x86
			:include-rebol-bulk
			:cross-haiku-x86
		]
		;@@ docker.io/oldes/rebol-dev:haiku-x64
		"Cross-compile Rebol/Base for Haiku x64" [
			name:     %rebol3-base-haiku-x64
			:cross-haiku-x64
		]
		"Cross-compile Rebol/Core for Haiku x64" [
			name:     %rebol3-core-haiku-x64
			:include-rebol-core
			:cross-haiku-x64
		]
		"Cross-compile Rebol/Bulk for Haiku x64" [
			name:     %rebol3-bulk-haiku-x64
			:include-rebol-bulk
			:cross-haiku-x64
		]


		;-- RaspberryPi cross-compilation                     
		;@@ sudo apt-get install gcc-arm-linux-gnueabi
		"Cross-compile Rebol/Base for RaspberryPi armv6 (gnueabi)" [
			name:     %rebol3-base-linux-gnueabi
			:cross-linux-gnueabi
			:make-exe
		]
		"Cross-compile Rebol/Core for RaspberryPi armv6 (gnueabi)" [
			name:     %rebol3-core-linux-gnueabi
			:include-rebol-core
			:cross-linux-gnueabi
			:make-exe
		]
		"Cross-compile Rebol/Bulk for RaspberryPi armv6 (gnueabi)" [
			name:     %rebol3-bulk-linux-gnueabi
			:include-rebol-bulk
			:cross-linux-gnueabi
			:make-exe
		]
		;@@ sudo apt-get install gcc-arm-linux-gnueabihf
		"Cross-compile Rebol/Base for RaspberryPi armv7 (gnueabihf)" [
			name:     %rebol3-base-linux-gnueabihf
			:cross-linux-gnueabihf
			:make-exe
		]
		"Cross-compile Rebol/Core for RaspberryPi armv7 (gnueabihf)" [
			name:     %rebol3-core-linux-gnueabihf
			:include-rebol-core
			:cross-linux-gnueabihf
			:make-exe
		]
		"Cross-compile Rebol/Bulk for RaspberryPi armv7 (gnueabihf)" [
			name:     %rebol3-bulk-linux-gnueabihf
			:include-rebol-bulk
			:cross-linux-gnueabihf
			:make-exe
		]
		;@@ sudo apt-get install gcc-aarch64-linux-gnu
		"Cross-compile Rebol/Base for RaspberryPi arm64 (aarch64)" [
			name:     %rebol3-base-linux-aarch64
			:cross-linux-aarch64
			:make-exe
		]
		"Cross-compile Rebol/Core for RaspberryPi arm64 (aarch64)" [
			name:     %rebol3-core-linux-aarch64
			:include-rebol-core
			:cross-linux-aarch64
			:make-exe
		]
		"Cross-compile Rebol/Bulk for RaspberryPi arm64 (aarch64)" [
			name:     %rebol3-bulk-linux-aarch64
			:include-rebol-bulk
			:cross-linux-aarch64
			:make-exe
		]
		;@@ sudo apt-get install gcc-riscv64-linux-gnu
		"Cross-compile Rebol/Base (riscv64)" [
			name:     %rebol3-base-linux-riscv64
			:cross-linux-riscv64
			:make-exe
		]
		"Cross-compile Rebol/Core (riscv64)" [
			name:     %rebol3-core-linux-riscv64
			:include-rebol-core
			:cross-linux-riscv64
			:make-exe
		]
		"Cross-compile Rebol/Bulk (riscv64)" [
			name:     %rebol3-bulk-linux-riscv64
			:include-rebol-bulk
			:cross-linux-riscv64
			:make-exe
		]
	]
	#if macOS? [
		"Rebol/Base macos-x64" [
			name:   %rebol3-base-macos-x64
			:target-macos
			:make-x64-exe
		]
		"Rebol/Core macos-x64" [
			name:   %rebol3-core-macos-x64
			:target-macos
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk macos-x64" [
			name:   %rebol3-bulk-macos-x64
			:target-macos
			:include-rebol-bulk
			:make-x64-exe
		]
		"Rebol/Base macos-arm64" [
			name:   %rebol3-base-macos-arm64
			:target-macos
			:make-arm64-exe
		]
		"Rebol/Core macos-arm64" [
			name:   %rebol3-core-macos-arm64
			:target-macos
			:include-rebol-core
			:make-arm64-exe
		]
		"Rebol/Bulk macos-arm64" [
			name:   %rebol3-bulk-macos-arm64
			:target-macos
			:include-rebol-bulk
			:make-arm64-exe
		]

		"Rebol/Core macos-x64 shared library" [
			name:   %lib-rebol3-core-macos-x64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol-core.3.dylib'"
			:target-macos
			:include-rebol-core
			:make-x64-dll
		]
		"Rebol/Core macos-x64 host application" [
			name:   %host-core-macos-x64
			shared: %lib-rebol3-core-macos-x64
			:target-macos
			:include-rebol-core
			:make-x64-host
		]
		"Rebol/Bulk macos-x64 shared library" [
			name:   %lib-rebol3-bulk-macos-x64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol.3.dylib'"
			:target-macos
			:include-rebol-bulk
			:make-x64-dll
		]
		"Rebol/Bulk macos-x64 host application" [
			name:   %host-bulk-macos-x64
			shared: %lib-rebol3-bulk-macos-x64
			:target-macos
			:include-rebol-core
			:make-x64-host
		]

		"Rebol/Core macos-arm64 shared library" [
			name:   %lib-rebol3-core-macos-arm64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol-core.3.dylib'"
			:target-macos
			:include-rebol-core
			:make-arm64-dll
		]
		"Rebol/Core macos-arm64 host application" [
			name:   %host-core-macos-arm64
			shared: %lib-rebol3-core-macos-arm64
			:target-macos
			:include-rebol-core
			:make-arm64-host
		]

		"Rebol/Bulk macos-arm64 shared library" [
			name:   %lib-rebol3-bulk-macos-arm64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol.3.dylib'"
			:target-macos
			:include-rebol-bulk
			:make-arm64-dll
		]
		"Rebol/Bulk macos-arm64 host application" [
			name:   %host-bulk-macos-arm64
			shared: %lib-rebol3-bulk-macos-arm64
			:target-macos
			:include-rebol-bulk
			:make-arm64-host
		]
	]
	#if OpenBSD? [
		"Rebol/Base openbsd-x86" [
			name:   %rebol3-base-openbsd-x86
			:target-openbsd
			:make-x86-exe
		]
		"Rebol/Core openbsd-x86" [
			name:   %rebol3-core-openbsd-x86
			:target-openbsd
			:include-rebol-core
			:make-x86-exe
		]
		"Rebol/Bulk openbsd-x86" [
			name:   %rebol3-bulk-openbsd-x86
			:target-openbsd
			:include-rebol-bulk
			:make-x86-exe
		]

		"Rebol/Base openbsd-x64" [
			name:   %rebol3-base-openbsd-x64
			:target-openbsd
			:make-x64-exe
		]
		"Rebol/Core openbsd-x64" [
			name:   %rebol3-core-openbsd-x64
			:target-openbsd
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk openbsd-x64" [
			name:   %rebol3-bulk-openbsd-x64
			:target-openbsd
			:include-rebol-bulk
			:make-x64-exe
		]

		"Rebol/Core openbsd-x64 shared library" [
			name:   %lib-rebol3-core-openbsd-x64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol-core.3.so'"
			:target-openbsd
			:include-rebol-core
			:make-x64-dll
		]
		"Rebol/Core openbsd-x64 host application" [
			name:   %host-core-openbsd-x64
			shared: %lib-rebol3-core-openbsd-x64
			:target-openbsd
			:include-rebol-core
			:make-x64-host
		]
	]
	#if FreeBSD? [
		"Rebol/Base freebsd-x64" [
			name:   %rebol3-base-freebsd-x64
			:target-freebsd
			:make-x64-exe
		]
		"Rebol/Core freebsd-x64" [
			name:   %rebol3-core-freebsd-x64
			:target-freebsd
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk freebsd-x64" [
			name:   %rebol3-bulk-freebsd-x64
			:target-freebsd
			:include-rebol-bulk
			:make-x64-exe
		]

		"Rebol/Core freebsd-x64 shared library" [
			name:   %lib-rebol3-core-freebsd-x64
			lflag:  "-Wl,-install_name,'/usr/local/lib/librebol-core.3.so'"
			:target-freebsd
			:include-rebol-core
			:make-x64-dll
		]
		"Rebol/Core freebsd-x64 host application" [
			name:   %host-core-freebsd-x64
			shared: %lib-rebol3-core-freebsd-x64
			:target-freebsd
			:include-rebol-core
			:make-x64-host
		]
	]
	#if (system/platform = 'netbsd) [
		"Rebol/Base netbsd-x64" [
			name:   %rebol3-base-netbsd-x64
			:target-netbsd
			:make-x64-exe
		]
		"Rebol/Core netbsd-x64" [
			name:   %rebol3-core-netbsd-x64
			:target-netbsd
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk netbsd-x64" [
			name:   %rebol3-bulk-netbsd-x64
			:target-netbsd
			:include-rebol-bulk
			:make-x64-exe
		]
	]
	#if (system/platform = 'haiku) [
		"Rebol/Base haiku-x86" [
			name:     %rebol3-base-haiku-x86
			:target-haiku
			:make-x86-exe
		]
		"Rebol/Base haiku-x64" [
			name:     %rebol3-base-haiku-x64
			:target-haiku
			:make-x64-exe
		]
		"Rebol/Core haiku-x86" [
			name:     %rebol3-core-haiku-x86
			:target-haiku
			:include-rebol-core
			:make-x86-exe
		]
		"Rebol/Core haiku-x64" [
			name:     %rebol3-core-haiku-x64
			:target-haiku
			:include-rebol-core
			:make-x64-exe
		]
		"Rebol/Bulk haiku-x86" [
			name:     %rebol3-bulk-haiku-x86
			:target-haiku
			:include-rebol-bulk
			:make-x86-exe
		]
		"Rebol/Bulk haiku-x64" [
			name:     %rebol3-bulk-haiku-x64
			:target-haiku
			:include-rebol-bulk
			:make-x64-exe
		]
	]
	#if (system/platform = 'turris) [
		"Rebol/Base turris-armv7" [
			name:   %rebol3-base-turris-armv7
			:target-turris
			:make-armv7-exe
		]
		"Rebol/Core turris-armv7" [
			name:   %rebol3-core-turris-armv7
			:target-turris
			:include-rebol-core
			:make-armv7-exe
		]
		"Rebol/Bulk turris-armv7" [
			name:   %rebol3-bulk-turris-armv7
			:target-turris
			:include-rebol-bulk
			:make-armv7-exe
		]
	]
	"Test extension 32bit" [
		name:  %test-x86.rebx
		:arch-x86
		:make-ext-test
	]
	"Test extension 64bit" [
		name:  %test-x64.rebx
		:arch-x64
		:make-ext-test
	]

	"Amalgamate extension include file" [
		do %make/tools/amalgamate-ext.r3
	]
]
